from enum import Enum
from typing import NamedTuple, Callable, List, Any, Dict
from datetime import datetime
from datetime import timezone
from dateutil import parser
import pandas as pd
import numpy as np


# --------------------------------------------
# Candle‑Definition (API-Ready)
# --------------------------------------------
class Candle:
    def __init__(
        self,
        timestamp,
        open,
        high,
        low,
        close,
        volume,
        open_bid=None, high_bid=None, low_bid=None, close_bid=None,
        open_ask=None, high_ask=None, low_ask=None, close_ask=None
    ):
        self.timestamp = timestamp
        self.open = open
        self.high = high
        self.low = low
        self.close = close
        self.volume = volume

        self.open_bid = open_bid
        self.high_bid = high_bid
        self.low_bid = low_bid
        self.close_bid = close_bid

        self.open_ask = open_ask
        self.high_ask = high_ask
        self.low_ask = low_ask
        self.close_ask = close_ask

    def __repr__(self):
        return (
            f"Candle(ts={self.timestamp}, O={self.open}, H={self.high}, L={self.low}, C={self.close}, V={self.volume}, "
            f"OB={self.open_bid}, HB={self.high_bid}, LB={self.low_bid}, CB={self.close_bid}, "
            f"OA={self.open_ask}, HA={self.high_ask}, LA={self.low_ask}, CA={self.close_ask})"
        )

    def to_dict(self):
        ts = self.timestamp
        if ts.tzinfo is None:
            ts = ts.replace(tzinfo=timezone.utc)  # nur setzen, wenn nicht vorhanden

        d = {
            "t": int(ts.timestamp() * 1000),
            "o": self.open,
            "h": self.high,
            "l": self.low,
            "c": self.close,
            "v": self.volume,
        }

        # Optional-Felder nur aufnehmen, wenn vorhanden
        for field in [
            "open_bid", "high_bid", "low_bid", "close_bid",
            "open_ask", "high_ask", "low_ask", "close_ask"
        ]:
            val = getattr(self, field, None)
            if val is not None:
                d[field] = val

        return d
    
    @staticmethod
    def from_dict(d: dict) -> "Candle":
        # Timestamp-Feld identifizieren
        if "t" in d:
            ts = d["t"]
        elif "timestamp" in d:
            ts = d["timestamp"]
        else:
            raise ValueError("Unbekanntes Candle-Format – weder 't' noch 'timestamp' gefunden")

        # ✅ Robuste Timestamp-Konvertierung
        if isinstance(ts, (int, float, np.integer)):
            unit = 'ms' if ts > 1e12 else 's'
            ts = pd.to_datetime(ts, unit=unit, utc=True).tz_convert(None)
        elif isinstance(ts, str):
            ts = pd.to_datetime(ts, utc=True).tz_convert(None)
        elif isinstance(ts, (datetime, pd.Timestamp)):
            ts = pd.to_datetime(ts, utc=True).tz_convert(None)
        else:
            raise TypeError(f"[from_dict] Unsupported timestamp type: {type(ts)} → {ts}")

        return Candle(
            timestamp=ts,
            open=d.get("o") or d.get("open"),
            high=d.get("h") or d.get("high"),
            low=d.get("l") or d.get("low"),
            close=d.get("c") or d.get("close"),
            volume=d.get("v") or d.get("volume"),
            open_bid=d.get("open_bid"),
            high_bid=d.get("high_bid"),
            low_bid=d.get("low_bid"),
            close_bid=d.get("close_bid"),
            open_ask=d.get("open_ask"),
            high_ask=d.get("high_ask"),
            low_ask=d.get("low_ask"),
            close_ask=d.get("close_ask"),
        )






def dicts_to_candles(dict_list: List[Dict[str, Any]]) -> List[Candle]:
    """
    Wandelt eine Liste von Candle-Dicts aus der API/Aggregation in Candle-Objekte um.
    Erwartet timestamp in ms. Bid/Ask-Felder optional, default None.
    """
    candles = []
    for item in dict_list:
        raw_ts = item.get("timestamp")
        if isinstance(raw_ts, (int, float, np.integer)):
            ts = pd.to_datetime(int(raw_ts), unit='ms', utc=True).tz_convert(None)
        elif isinstance(raw_ts, str):
            ts = pd.to_datetime(raw_ts, utc=True).tz_convert(None)
        elif isinstance(raw_ts, (datetime, pd.Timestamp)):
            ts = pd.to_datetime(raw_ts, utc=True).tz_convert(None)
        else:
            raise TypeError(f"[dicts_to_candles] Unsupported timestamp type: {type(raw_ts)} → {raw_ts}")

        candles.append(Candle(
            timestamp=ts,
            open=item['open'],
            high=item['high'],
            low=item['low'],
            close=item['close'],
            volume=item['volume'],
            open_bid=item.get('open_bid'),
            high_bid=item.get('high_bid'),
            low_bid=item.get('low_bid'),
            close_bid=item.get('close_bid'),
            open_ask=item.get('open_ask'),
            high_ask=item.get('high_ask'),
            low_ask=item.get('low_ask'),
            close_ask=item.get('close_ask'),
        ))

    return candles



# --------------------------------------------
# Phase‑Enum
# --------------------------------------------
class Phase(Enum):
    NEUTRAL           = "Neutral"
    BASE_SWITCH_BEAR  = "Base_Switch_Bear"
    SWITCH_BEAR       = "Switch_Bear"
    TREND_BEAR        = "Trend_Bear"
    BASE_BEAR         = "Base_Bear"
    SWITCH_BULL       = "Switch_Bull"
    BASE_SWITCH_BULL  = "Base_Switch_Bull"
    TREND_BULL        = "Trend_Bull"
    BASE_BULL         = "Base_Bull"

# --------------------------------------------
# ContextStore für Sonderlogik
# --------------------------------------------
class ContextStore(dict):
    """Speichert Sonderlogik-Daten wie Initial-Lows/Highs und Extremes."""
    pass

# --------------------------------------------
# PhaseRule für Transitionen
# --------------------------------------------
PhaseCondition = Callable[[Phase, List[Candle], ContextStore], bool]

class PhaseRule(NamedTuple):
    from_phase: Phase
    to_phase: Phase
    condition: PhaseCondition

