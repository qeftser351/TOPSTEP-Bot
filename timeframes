"""
Definition der Zeiteinheiten und Übergangsregeln für die Strategie.
- k (Kontext-Zeiteinheit): 15min (900 Sekunden)
- b (Bestätigungs-Zeiteinheit): 3min (180 Sekunden)
- e (Einstiegs-Zeiteinheit): 15sec

Bot-Start:
- Starte in k und lade HISTORY_LIMIT[K] Kerzen, nimm deren Analyse-Resultat als initiale Phase.

Wechsel:
- Bei jedem Wechsel in eine neue TF rufe zum Zeitpunkt des Wechsels ebenfalls init_from_history() mit HISTORY_LIMIT[tf] an,
  um die Phase in der neuen TF sofort zu bestimmen.

Zeitreihen-Logik:
- Wechsel k→b: wenn k in einer Base-Phase ist.
- Wechsel b→e: wenn b in gleicher Grundrichtung wie k ist und in einer Base-Phase.
- Rückkehr b→k: wenn k-Grundrichtung von der bei Wechsel eingehaltenen abweicht.
- Rückkehr e→b: wenn b-Grundrichtung von der bei Wechsel eingehaltenen abweicht.
"""
from config.phase import Phase
from core.candles import Phase
import numpy as np


# Zeiträume in Sekunden (API-unabhängig, Aggregation im Bot)
K = 900   # Kontext-Zeiteinheit: 15 Minuten
B = 180   # Bestätigungs-Zeiteinheit: 3 Minuten
E = 15    # Einstiegs-Zeiteinheit: 15 Sekunden

TIMEFRAMES = [K, B, E]

# Historische Bars zum Initialisieren in jeder TF
HISTORY_LIMIT: dict[int, int] = {
    K: 50,
    B: 50,
    E: 50,
}

# Als Base-Phase gelten alle Baseline-Zustände
BASE_PHASES: set[Phase] = {
    Phase.BASE_BULL,
    Phase.BASE_SWITCH_BULL,
    Phase.BASE_BEAR,
    Phase.BASE_SWITCH_BEAR,
}


def get_direction(phase: Phase) -> str:
    """
    Gibt die Grundrichtung einer Phase zurück: 'bull' oder 'bear'.
    """
    name = phase.name.lower() if phase is not None else ''
    if 'bull' in name:
        return 'bull'
    elif 'bear' in name:
        return 'bear'
    return ''


def can_k_to_b(phase):
    return phase in (
        Phase.BASE_SWITCH_BULL, Phase.BASE_SWITCH_BEAR,
        Phase.BASE_BULL, Phase.BASE_BEAR,
        Phase.TREND_BULL, Phase.TREND_BEAR
    )


def can_b_to_e(phase_k, phase_b):
    return (
        phase_k in (Phase.BASE_BULL, Phase.BASE_BEAR, Phase.BASE_SWITCH_BULL, Phase.BASE_SWITCH_BEAR, Phase.TREND_BULL, Phase.TREND_BEAR)
        and
        phase_b in (Phase.BASE_BULL, Phase.BASE_BEAR, Phase.BASE_SWITCH_BULL, Phase.BASE_SWITCH_BEAR)
        and
        get_direction(phase_b) == get_direction(phase_k)
    )


def should_switch_back_to_k(phase_k: Phase, entered_direction: str) -> bool:
    """
    Während in b: zurück nach k,
    sobald sich get_direction(k) von entered_direction unterscheidet.
    """
    if not entered_direction:
        return False
    return get_direction(phase_k) != entered_direction


def should_switch_back_to_b(phase_b: Phase, entered_direction: str) -> bool:
    """
    Während in e: zurück nach b,
    sobald sich get_direction(b) von entered_direction unterscheidet.
    """
    if not entered_direction:
        return False
    return get_direction(phase_b) != entered_direction


def get_history_limit(tf: int) -> int:
    """
    Liefert die Anzahl Bars, die beim Wechsel in die TF
    zum Initialisieren geladen werden sollten.
    """
    return HISTORY_LIMIT.get(tf, 50)


# --- Aggregations-Utility für Custom-Kerzen (z. B. in deinem Datenhandler nutzen) ---

import pandas as pd
from datetime import datetime

def aggregate_candles(candles: list[dict], timeframe_seconds: int) -> list[dict]:
    if not candles:
        return []

    # Normalisierung des Timestamp-Schlüssels
    if "timestamp" not in candles[0]:
        for c in candles:
            c["timestamp"] = c.pop("t")

    df = pd.DataFrame(candles)
    
    if 'o' in df.columns:
        df.rename(columns={
            "o": "open", "h": "high", "l": "low",
            "c": "close", "v": "volume"
        }, inplace=True)


    if 'timestamp' not in df.columns:
        raise ValueError("Input candles missing 'timestamp' key")

    # ✅ Robust: Konvertiere timestamps → pd.Timestamp (UTC)
    sample_ts = df['timestamp'].iloc[0]
    if isinstance(sample_ts, (int, float, np.integer)):
        unit = 's' if sample_ts < 1e10 else 'ms'
        df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True, unit=unit)
    elif isinstance(sample_ts, str):
        df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True)
    elif isinstance(sample_ts, (datetime, pd.Timestamp)):
        df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True)
    else:
        raise TypeError(f"[aggregate_candles] Unsupported timestamp format: {type(sample_ts)} → {sample_ts}")

    df.set_index('timestamp', inplace=True)

    # ✅ Spalten-Validierung vor Aggregation
    required_cols = {'open', 'high', 'low', 'close', 'volume'}
    missing = required_cols - set(df.columns)
    if missing:
        print(f"[ERROR] aggregate_candles → Missing required columns: {missing}")
        print(f"[DEBUG] Aktuelle Spalten im DF: {df.columns.tolist()}")
        raise ValueError(f"[aggregate_candles] Cannot aggregate – missing columns: {missing}")

    # Optionales Debugging
    print(f"[DEBUG] Raw {timeframe_seconds}s DF:")
    print(df.tail())

    # Aggregation
    rule = f"{timeframe_seconds}s"
    agg_dict = {
        'open': 'first',
        'high': 'max',
        'low': 'min',
        'close': 'last',
        'volume': 'sum'
    }
    df_agg = df.resample(rule, label='left', closed='right').agg(agg_dict).dropna()

    if df_agg.empty:
        print(f"[Aggregator] WARNING: No candles aggregated for timeframe={timeframe_seconds}")
        return []

    print(f"[DEBUG] Aggregated {timeframe_seconds}s DF:")
    print(df_agg.tail())

    # Rückkonvertierung: UTC-Timestamps in int(ms)
    df_agg = df_agg.reset_index()
    df_agg['timestamp'] = (df_agg['timestamp'].astype('int64') // 10**6).astype(int)

    # Debug-Log vor der Rückgabe
    for row in df_agg.itertuples(index=False):
        print(f"[Aggregator] Neue Kerze timeframe_seconds={timeframe_seconds}: "
              f"timestamp={pd.to_datetime(row.timestamp, unit='ms')} "
              f"open={row.open} high={row.high} low={row.low} close={row.close} volume={row.volume}")

    # Rückgabe mit explizitem Cast der Timestamp-Werte
    candles = df_agg.to_dict(orient='records')
    return candles









