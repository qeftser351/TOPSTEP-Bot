import time
from datetime import datetime, timedelta
from typing import Dict, List, Callable, Optional
from types import SimpleNamespace
from typing import Any
import pytz
import pandas as pd
from dateutil import parser
from core.candles import Candle
from config.timeframes import get_history_limit, TIMEFRAMES
from projectx_api import ProjectXAPI
from ws_client_signalr import MarketWSClient
from typing import Dict, List, Optional, Callable, Tuple
from config.timeframes import aggregate_candles
from candle_aggregator import CandleAggregator
import numpy as np






class DataHandler:
    def __init__(self, api: ProjectXAPI, account_id: int, contract_id_to_name: Dict[str, str]):
        self.api = api
        self.account_id = account_id
        self.strategy = None

        # Key: contract_id → timeframe (sec) → list of Candle
        self.histories: Dict[str, Dict[int, List[Candle]]] = {}

        # Key: (contract_id, timeframe) → list of callbacks
        self.subscribers: Dict[Tuple[str, int], List[Callable[[dict], None]]] = {}

        # Letzter Timestamp für History-Sync
        self.last_history_ts: Dict[str, Dict[int, Optional[datetime]]] = {}

        # Contract-Caches
        self.contract_details_cache: Dict[str, dict] = {}
        self.contract_name_cache: Dict[str, str] = {}

        # WebSocket-Client (Market)
        self.ws_client: Optional[MarketWSClient] = None
        
        self.strategies: Dict[str, Any] = {}
        
        self.last_candle_ts: Dict[str, Dict[int, datetime]] = {}
        
        self.contract_id_to_name = contract_id_to_name
        

        




    def fetch_history(self, contract_id: str, timeframe: int, limit: int) -> List[Candle]:
        end_time = datetime.utcnow()
        start_time = end_time - timedelta(seconds=timeframe * limit)

        raw = self.api.get_candles(
            contract_id=contract_id,
            unit=1,               # Sekunden
            unit_number=15,       # 15s-Bars
            limit=limit * (timeframe // 15),
            live=False,
            start_time=start_time,
            end_time=end_time,
            include_partial_bar=False
        )

        if not raw:
            print(f"[ERROR] Keine historischen Kerzen empfangen für {contract_id}")
            return []


        df = pd.DataFrame(raw)
        df.rename(columns={
            "t": "timestamp", "o": "open", "h": "high", "l": "low",
            "c": "close", "v": "volume"
        }, inplace=True)

        # ✅ Robuste Timestamp-Konvertierung (ms → UTC-naiv)
        sample_ts = df["timestamp"].iloc[0]
        if isinstance(sample_ts, (int, float, np.integer)):
            unit = 's' if sample_ts < 1e10 else 'ms'
            df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True, unit=unit)
        elif isinstance(sample_ts, str):
            df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True)
        elif isinstance(sample_ts, (datetime, pd.Timestamp)):
            df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True)
        else:
            raise TypeError(f"[fetch_history] Unsupported timestamp format: {type(sample_ts)} → {sample_ts}")


        # 🔁 Aggregation über zentrale Funktion
        candles_raw = df.to_dict(orient="records")
        aggregated = aggregate_candles(candles_raw, timeframe)


        candles = [Candle.from_dict(c) for c in aggregated]

        self.histories.setdefault(contract_id, {})[timeframe] = candles.copy()
        self.last_history_ts.setdefault(contract_id, {})[timeframe] = candles[-1].timestamp if candles else None
        return candles


    
    def _handle_candle(self, contract_id: str, timeframe: int, candle: Candle):
        print(f"[DEBUG] dispatch {contract_id} {timeframe}s → {candle.timestamp}")
        key = (contract_id, timeframe)
        subs = self.subscribers.get(key, [])
        print(f"[DEBUG] dispatch {contract_id} {timeframe}s → {candle.timestamp} to {len(subs)} subscribers")
        for cb in subs:
            cb(candle.to_dict())

            
    
    def start_ws(self, token: str, contract_ids: List[str]):
        from ws_client_signalr import MarketWSClient

        # ✅ Robuster Aggregator-Callback
        def handle_15s_candle(contract_id, interval, candle):
            if interval != 15:
                return
            if not isinstance(candle, Candle):
                print(f"[ERROR] Ungültige Candle-Daten: type={type(candle)} value={candle}")
                return
            self._on_15s_candle(contract_id, interval, candle)


        # ✅ Initialisiere Aggregator korrekt mit Callback
        self.quote_aggregator = CandleAggregator(
            interval_seconds=15,
            on_new_candle=handle_15s_candle
        )

        # ✅ Subscription für 15s-Dispatch (optional – wenn du _on_15s_candle direkt brauchst)
        def make_handler(contract_id):
            def handler(candle_dict):
                candle = Candle.from_dict(candle_dict)
                self._on_15s_candle(contract_id, 15, candle)
            return handler

        for contract_id in contract_ids:
            self.subscribe(contract_id, 15, make_handler(contract_id))


        # ✅ WebSocket-Client initialisieren
        self.ws_client = MarketWSClient(
            token=token,
            initial_symbols=contract_ids,
            quote_handler=self._handle_quote,
            candle_handler=None,
            contract_id_to_name=self.contract_name_cache
        )

        self.api.attach_ws_client(self.ws_client)
        self.ws_client.connect(contract_ids)






        


    def _handle_quote(self, contract_id: str, ts, bid: float, ask: float):
        original_ts = ts  # Für Debug-Zwecke

        # 🔒 Timestamp-Konvertierung (robust, pandas-kompatibel, UTC-naiv)
        try:
            if isinstance(ts, (int, float, np.integer, np.floating)):
                if ts < 0 or ts > 1e13:
                    raise ValueError(f"Out-of-range Unix-Timestamp: {ts}")
                unit = 's' if ts < 1e10 else 'ms'
                ts = pd.to_datetime(ts, utc=True, unit=unit).to_pydatetime().replace(tzinfo=None)
            elif isinstance(ts, str):
                ts = pd.to_datetime(ts, utc=True).to_pydatetime().replace(tzinfo=None)
            elif isinstance(ts, (datetime, pd.Timestamp)):
                ts = pd.to_datetime(ts, utc=True).to_pydatetime().replace(tzinfo=None)
            else:
                raise TypeError(f"Unsupported timestamp type: {type(ts)}")
        except Exception as e:
            print(f"[ERROR] Failed to normalize timestamp: {original_ts} → {e}")
            print(f"[DEBUG] Typ: {type(original_ts)} | Wert: {original_ts}")
            return

        # ❌ Unvollständige Quote – abbrechen
        if bid is None or ask is None:
            print(f"[MarketWS][WARN] Unvollständige Quote: contract_id={contract_id} → bid={bid}, ask={ask}")
            return

        # ✅ Aggregator-Update
        if hasattr(self, "quote_aggregator"):
            try:
                self.quote_aggregator.update(contract_id, bid, ask, ts)
            except Exception as e:
                print(f"[ERROR] Aggregator-Update-Fehler: contract_id={contract_id}, ts={ts}, bid={bid}, ask={ask} → {e}")







            
            
    def _on_15s_candle(self, contract_id: str, timeframe: int, candle: Candle):
        print(f"[15s-Candle] {contract_id} @ {candle.timestamp} | O={candle.open} H={candle.high} L={candle.low} C={candle.close}")

        # 1. 15s speichern
        self.append_and_get(contract_id, 15, candle)
        self._handle_candle(contract_id, 15, candle)
        
        print(f"[DEBUG] {tf}s COUNT: {len(self.histories[contract_id][tf])}")

        # 2. an Strategy-Controller weiterreichen
        if self.strategies.get(contract_id):
            self.strategies[contract_id].on_new_candle(contract_id, 15, candle)

        # 3. lokale Aggregation: 15s → 3m → 15m
        candles_15s = self.histories.get(contract_id, {}).get(15, [])
        if not candles_15s:
            print(f"[DEBUG] {contract_id}: Keine 15s-Candles vorhanden.")
            return

        print(f"[DEBUG] {contract_id} hat {len(candles_15s)} × 15s-Candles")
        print(f"[DEBUG] 15s Time-Range: {candles_15s[0].timestamp} → {candles_15s[-1].timestamp}")

        for tf in [180, 900]:  # 3m, 15m
            candles_dicts = [c.to_dict() for c in candles_15s]
            aggregated = aggregate_candles(candles_dicts, tf)

            if not aggregated:
                print(f"[DEBUG] ❌ Keine {tf}s-Candles aggregiert für {contract_id}")
                continue

            last_candle_data = aggregated[-1]
            last_candle = Candle(**last_candle_data)
            last_ts = self.last_candle_ts.get(contract_id, {}).get(tf)
            if last_ts and last_candle.timestamp <= last_ts:
                print(f"[SKIP] {tf}s Candle bereits verarbeitet: {last_candle.timestamp}")
                continue

            print(f"[DEBUG] ✅ Aggregierte {tf}s-Candle für {contract_id}: {last_candle.timestamp}")

            # ✅ Safe einspeisen und verarbeiten
            self.append_and_get(contract_id, tf, last_candle)
            self._handle_candle(contract_id, tf, last_candle)

            self.last_candle_ts.setdefault(contract_id, {})[tf] = last_candle.timestamp

            if self.strategies.get(contract_id):
                self.strategies[contract_id].on_new_candle(contract_id, tf, last_candle)





    
    def subscribe_candles(self, contract_id: str, timeframe: int, callback: Callable):
        key = (contract_id, timeframe)
        if key not in self.subscribers:
            self.subscribers[key] = []
        self.subscribers[key].append(callback)



    def append_and_get(self, contract_id: str, timeframe: int, candle: Candle) -> List[Candle]:
        # 1. Timestamp in UTC-naiv umwandeln (falls nötig)
        if candle.timestamp.tzinfo is not None:
            candle_ts = candle.timestamp.astimezone(pytz.UTC).replace(tzinfo=None)
            candle = Candle(
                timestamp=candle_ts,
                open=candle.open,
                high=candle.high,
                low=candle.low,
                close=candle.close,
                volume=candle.volume,
                open_bid=candle.open_bid,
                high_bid=candle.high_bid,
                low_bid=candle.low_bid,
                close_bid=candle.close_bid,
                open_ask=candle.open_ask,
                high_ask=candle.high_ask,
                low_ask=candle.low_ask,
                close_ask=candle.close_ask
            )

        # 2. Initialisierung von Strukturen
        self.histories.setdefault(contract_id, {})
        self.last_history_ts.setdefault(contract_id, {})
        self.last_candle_ts.setdefault(contract_id, {})

        if timeframe not in self.histories[contract_id]:
            limit = get_history_limit(timeframe)
            self.fetch_history(contract_id, timeframe, limit)

        buf = self.histories[contract_id][timeframe]

        # 3. Guard: Verhindere Duplikate
        last_known_ts = self.last_candle_ts[contract_id].get(timeframe)
        if last_known_ts and candle.timestamp <= last_known_ts:
            print(f"[GUARD] ⏭️ Duplicate candle: {contract_id} {timeframe}s @ {candle.timestamp}")
            return buf

        # 4. Einfügen
        buf.append(candle)
        self.last_history_ts[contract_id][timeframe] = candle.timestamp
        self.last_candle_ts[contract_id][timeframe] = candle.timestamp

        # 5. Buffer begrenzen
        max_len = {
            15: 120,     # 15s → 30 Minuten
            180: 80,     # 3m → >4h
            900: 40,     # 15m → >10h
        }.get(timeframe, 100)

        if len(buf) > max_len:
            buf.pop(0)

        return buf




    def get_symbol_info(self, contract_id: str) -> SimpleNamespace:
        if contract_id not in self.contract_details_cache:
            contract = self.api.get_contract_details_by_id(contract_id)
            if not contract or "name" not in contract:
                raise RuntimeError(f"Contract-Details oder Name fehlen für {contract_id}")
            self.contract_details_cache[contract_id] = contract
            self.contract_name_cache[contract_id] = contract["name"]
        else:
            contract = self.contract_details_cache[contract_id]

        # → Live-Quote aus Websocket-Client holen, wenn vorhanden
        bid, ask = None, None
        if hasattr(self.api, "ws_client") and self.api.ws_client:
            quote = self.api.ws_client.latest_quotes.get(contract_id, {})
            bid = quote.get("bid")
            ask = quote.get("ask")

        return SimpleNamespace(
            bid=bid,
            ask=ask,
            stop_level=contract.get("tradeStopsLevel", 0),
            tick_size=contract.get("tickSize", 0.0)
        )







        
    def subscribe(self, contract_id: str, timeframe: int, callback: Callable[[dict], None]):
        key = (contract_id, timeframe)
        if key not in self.subscribers:
            self.subscribers[key] = []
        if callback not in self.subscribers[key]:
            self.subscribers[key].append(callback)
        print(f"[DataHandler] Subscription registered: {contract_id} @ {timeframe}s")
                            
        
    def stop(self):
        if self.ws_client:
            self.ws_client.stop()
        # Falls du weitere Timer oder Threads im DataHandler hast, hier sauber stoppen.
        
    async def user_event(self, event_type, data):
        print(f"[DataHandler] User Event {event_type}: {data}")
        # hier kann man weitere Logik ergänzen





