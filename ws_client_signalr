import time
from signalrcore.hub_connection_builder import HubConnectionBuilder
from typing import Callable, Dict, List, Optional
from dateutil import parser
import pandas as pd
from core.candles import Candle
from datetime import datetime, timezone
from dateutil import parser



class MarketWSClient:
    def __init__(
        self,
        token: str,
        initial_symbols: List[str],
        quote_handler: Callable[[str, datetime, float, float], None],
        candle_handler: Callable[[str, int, dict], None],
        contract_id_to_name: Optional[Dict[str, str]] = None,
        on_new_candle: Optional[Callable[[str, int, Candle], None]] = None
    ):
        self.token = token
        self.contract_ids = initial_symbols
        self.quote_handler = quote_handler
        self.on_candle = candle_handler
        self.contract_id_to_name = contract_id_to_name or {}
        self.latest_quotes = {}

        

        self.tf_manager = None

        self.hub_url = f"wss://rtc.topstepx.com/hubs/market?access_token={token}"
        self.hub_connection = HubConnectionBuilder()\
            .with_url(self.hub_url)\
            .with_automatic_reconnect({
                "type": "raw",
                "keep_alive_interval": 10,
                "reconnect_interval": 5,
                "max_attempts": 5
            })\
            .build()

        self.hub_connection.on("GatewayQuote", self._on_quote_event)
        self.hub_connection.on_open(self.on_open)
        self.hub_connection.on_close(self.on_close)
        self.hub_connection.on_error(self.on_error)
        
        print(f"[MarketWS][INIT] quote_handler gesetzt: {self.quote_handler is not None}")

    def on_open(self):
        print("[MarketWS] Verbindung geöffnet")
        self.subscribe_quotes(self.contract_ids)
        

        
    def _on_quote_event(self, args):
        if not args or len(args) != 2:
            print(f"[MarketWS][ERROR] Ungültige Quote-Event-Args: {args}")
            return

        contract_id, data = args
        bid = data.get("bestBid")
        ask = data.get("bestAsk")
        ts_str = data.get("timestamp")

        if bid is None or ask is None or not ts_str:
            print(f"[MarketWS][WARN] Inkomplette Quote – {contract_id=} {data=}")
            return

        try:
            ts = parser.isoparse(ts_str).astimezone(timezone.utc).replace(tzinfo=None)
        except Exception as e:
            print(f"[MarketWS][ERROR] Ungültiger Timestamp: {ts_str} – {e}")
            return

        timestamp_ms = int(ts.timestamp() * 1000) 

        self.latest_quotes[contract_id] = {"bid": bid, "ask": ask, "timestamp": ts}

        if self.quote_handler:
            try:
                candle_dict = {
                    "timestamp": ts,
                    "open": bid,
                    "high": bid,
                    "low": bid,
                    "close": bid,
                    "volume": 1,
                    "open_bid": bid,
                    "high_bid": bid,
                    "low_bid": bid,
                    "close_bid": bid,
                    "open_ask": ask,
                    "high_ask": ask,
                    "low_ask": ask,
                    "close_ask": ask,
                }
                candle = Candle(**candle_dict)

                # ⛏️ WICHTIG: timestamp in Millisekunden
                timestamp_ms = int(ts.timestamp() * 1000)

                self.quote_handler(contract_id, timestamp_ms, bid, ask)
            except Exception as e:
                print(f"[MarketWS][ERROR] Quote-Handler Exception: {e}")




        








    def subscribe_quotes(self, contract_ids: List[str]):
        for cid in contract_ids:
            msg = {
                "type": 1,
                "target": "SubscribeContractQuotes",
                "arguments": [cid]
            }
            self.hub_connection.send("SubscribeContractQuotes", [cid])
            print(f"[MarketWS] send subscribe → {msg}")

    def on_close(self):
        print("[MarketWS] Connection closed")

    def on_error(self, error):
        from signalrcore.messages.completion_message import CompletionMessage
        if isinstance(error, CompletionMessage):
            print("[MarketWS][ERROR CompletionMessage]:", error.error)
        else:
            print("[MarketWS][ERROR]:", error)

    def _wrap_debug(self, func):
        def wrapper(*args, **kwargs):
            import json
            print("[MarketWS][DEBUG] Message empfangen in _wrap_debug()")
            try:
                print("[MarketWS][RECV][RAW]:", json.dumps(args[0], indent=2))
            except Exception:
                print("[MarketWS][RECV][RAW]:", args)
            return func(*args, **kwargs)
        return wrapper

    def connect(self, contract_ids: List[str]):
        self.contract_ids = contract_ids
        self.hub_connection.start()

    def run_forever(self):
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            self.stop()

    def stop(self):
        self.hub_connection.stop()
