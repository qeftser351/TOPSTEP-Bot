import os
import signal
import sys
import time
import threading
from dotenv import load_dotenv, find_dotenv
from typing import Dict
from datetime import datetime
from core.candles import Candle

from projectx_api import ProjectXAPI
from data_handler import DataHandler
from strategy import TradingStrategy
from config.timeframes import K, B, E
from ws_client import UserWebSocketClient

load_dotenv(find_dotenv(), override=True)

def start_periodic_summary(strategies: Dict[str, TradingStrategy], interval: int = 30):
    def _report():
        for strat in strategies.values():
            strat.controller.print_summary()
        t = threading.Timer(interval, _report)
        t.daemon = True
        t.start()

    t0 = threading.Timer(interval, _report)
    t0.daemon = True
    t0.start()

def shutdown(signum, frame):
    print("\nStop signal received, shutting down …")
    try: handler.stop()
    except Exception: pass
    try: handler.ws_client.stop()
    except Exception: pass
    try: user_client.stop()
    except Exception: pass
    sys.exit(0)

def parse_expiry(name):
    month_map = {"F": 1, "G": 2, "H": 3, "J": 4, "K": 5, "M": 6,
                 "N": 7, "Q": 8, "U": 9, "V": 10, "X": 11, "Z": 12}
    try:
        month = month_map.get(name[-2])
        year = 2020 + int(name[-1])
        return datetime(year, month, 1)
    except:
        return datetime.min

if __name__ == '__main__':
    signal.signal(signal.SIGINT, shutdown)
    signal.signal(signal.SIGTERM, shutdown)

    API_USER = os.environ.get("API_USER")
    API_KEY = os.environ.get("API_KEY")
    if not API_USER or not API_KEY:
        raise RuntimeError("API_USER oder API_KEY fehlt in Umgebungsvariablen")

    api = ProjectXAPI(username=API_USER, api_key=API_KEY)
    token = api.token
    

    symbol_prefixes = ["MNQ", "MGC", "MYM"]
    SYMBOL_NAMES = []
    contract_id_to_name = {}

    for prefix in symbol_prefixes:
        contracts = api.search_contracts(search_text=prefix)
        filtered = [c for c in contracts if c.get("name", "").startswith(prefix)]
        if not filtered:
            print(f"⚠️  Keine Kontrakte gefunden für {prefix}")
            continue

        sorted_contracts = sorted(filtered, key=lambda c: parse_expiry(c["name"]), reverse=True)
        best = sorted_contracts[0]

        name = best["name"]
        uuid = best["id"]
        SYMBOL_NAMES.append(name)
        contract_id_to_name[uuid] = name

        print(f"→ Ausgewählt: {name} | ID: {uuid} | DESC: {best.get('description')}")

    if not SYMBOL_NAMES:
        raise RuntimeError("Keine aktiven Symbole gefunden – Abbruch")

    accounts = api.get_active_accounts()
    if not accounts:
        raise RuntimeError("Kein aktives Konto gefunden")

    acct = accounts[0]
    account_id = acct["id"]
    INITIAL_BALANCE = acct.get("balance", 0.0)

    SYMBOLS = []
    symbol_params = {}
    contract_id_map = {}

    for symbol_name in SYMBOL_NAMES:
        contract = api.get_contract_by_name(symbol_name)
        contract_id = contract["id"]
        SYMBOLS.append(symbol_name)
        contract_id_map[symbol_name] = contract_id
        contract_id_to_name[contract_id] = symbol_name

        tick_size = contract.get("tickSize")
        if tick_size is None or tick_size <= 0:
            raise RuntimeError(f"Ungültige Tick-Größe für {symbol_name}")

        spread = 0.5 * tick_size
        symbol_params[symbol_name] = {
            "tick_size": tick_size,
            "spread": spread
        }

    handler = DataHandler(
        api=api,
        account_id=account_id,
        contract_id_to_name=contract_id_to_name  # ← genau das fehlt bisher
    )
    handler.strategies = {}  # neu: symbol → Strategy-Controller

    for sym in SYMBOLS:
        contract_id = contract_id_map[sym]
        handler.fetch_history(contract_id, timeframe=15, limit=100)

    strategies: Dict[str, TradingStrategy] = {}

    for symbol in SYMBOLS:
        params = symbol_params[symbol]
        contract_id = contract_id_map[symbol]

        strat = TradingStrategy(
            symbol=symbol,
            api=api,
            account_id=account_id,
            data_handler=handler,
            account_balance=INITIAL_BALANCE,
            tick_size=params["tick_size"],
            spread=params["spread"],
            contract_id=contract_id
        )

        strat.controller.initialize()
        strat.start()
        strategies[contract_id] = strat

        controller = strat.controller
        handler.strategies[contract_id] = controller


        handler.subscribe_candles(contract_id, 15, lambda c, ctl=controller: ctl.on_new_candle(contract_id, 15, Candle.from_dict(c)))
        handler.subscribe_candles(contract_id, 180, lambda c, ctl=controller: ctl.on_new_candle(contract_id, 180, Candle.from_dict(c)))
        handler.subscribe_candles(contract_id, 900, lambda c, ctl=controller: ctl.on_new_candle(contract_id, 900, Candle.from_dict(c)))







    contract_ids = [strategy.contract_id for strategy in strategies.values()]
    handler.start_ws(token, contract_ids)
    handler.ws_client.on_new_candle = handler._on_15s_candle

    user_client = UserWebSocketClient(token, account_id, handler.user_event)
    start_periodic_summary(strategies, interval=15)


    # Hauptloop
    try:
        handler.ws_client.run_forever()
    except KeyboardInterrupt:
        shutdown(None, None)

